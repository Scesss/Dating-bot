from aiogram import Router, types, F
from aiogram.fsm.context import FSMContext
from states.profile_states import ProfileStates
from keyboards.builders import *
from aiogram.filters import StateFilter
from database import db
from aiogram import Bot
import logging

logger = logging.getLogger(__name__)



router = Router()

@router.message(StateFilter(ProfileStates.MENU))
async def process_choose(message: types.Message, state: FSMContext):
    valid_answer = ["üîç –°–º–æ—Ç—Ä–µ—Ç—å –ê–Ω–∫–µ—Ç—ã", "üë®üèº –ú–æ—è –ê–Ω–∫–µ—Ç–∞", "üëë –¢–æ–ø", "üåô –°–æ–Ω", "üë©üèª‚Äçü¶∞ –ú–æ—è –ê–Ω–∫–µ—Ç–∞"]
    if message.text not in valid_answer:
        return await message.answer("–ù–µ—Ç —Ç–∞–∫–æ–≥–æ –≤–∞—Ä–∏–∞–Ω—Ç–∞ –æ—Ç–≤–µ—Ç–∞")

    elif message.text == "üë®üèº –ú–æ—è –ê–Ω–∫–µ—Ç–∞" or message.text == "üë©üèª‚Äçü¶∞ –ú–æ—è –ê–Ω–∫–µ—Ç–∞":
        # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –≤ —Ä–µ–∂–∏–º —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –ø—Ä–æ—Ñ–∏–ª—è
        await state.set_state(ProfileStates.EDIT_PROFILE)
        # –£–±–∏—Ä–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –º–µ–Ω—é, —á—Ç–æ–±—ã –Ω–µ –º–µ—à–∞–ª–∞ (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
        await message.answer("‚è≥ –û—Ç–∫—Ä—ã–≤–∞–µ–º —Ç–≤–æ—é –∞–Ω–∫–µ—Ç—É...",
                         reply_markup=types.ReplyKeyboardRemove())
        # –ü–æ–ª—É—á–∞–µ–º –ø—Ä–æ—Ñ–∏–ª—å –∏–∑ –±–∞–∑—ã
        profile = db.get_profile(message.from_user.id)
        if profile:
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–æ—Ç–æ+–¥–∞–Ω–Ω—ã–µ –ø—Ä–æ—Ñ–∏–ª—è —Å –∏–Ω–ª–∞–π–Ω-–∫–Ω–æ–ø–∫–∞–º–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
            caption = (f" –ò–º—è: {profile['name']}\n"
               f" –í–æ–∑—Ä–∞—Å—Ç: {profile['age']}\n"
               f" –ü–æ–ª: {profile['gender']}\n"
               f" –ò—â–µ—Ç: {profile['looking_for']}\n"
               f" –ì–æ—Ä–æ–¥: {profile['city'] or '–ù–µ —É–∫–∞–∑–∞–Ω'}\n"
               f" –û —Å–µ–±–µ: {profile['bio'][:1000]}")
            if profile.get('photo_id'):
                await message.answer_photo(profile['photo_id'], caption=caption,
                                   reply_markup=get_edit_menu_kb())
            else:
                await message.answer(caption, reply_markup=get_edit_menu_kb())
        else:
            await message.answer("–£ –≤–∞—Å –µ—â—ë –Ω–µ—Ç –∞–Ω–∫–µ—Ç—ã. –í–≤–µ–¥–∏—Ç–µ /start –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏.")
    elif message.text == "üîç –°–º–æ—Ç—Ä–µ—Ç—å –ê–Ω–∫–µ—Ç—ã":
        # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –≤ —Ä–µ–∂–∏–º –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —á—É–∂–∏—Ö –∞–Ω–∫–µ—Ç
        await state.set_state(ProfileStates.BROWSING)
        # –£–±–∏—Ä–∞–µ–º –º–µ–Ω—é-–∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
        await message.answer("‚è≥ –ü–æ–∏—Å–∫ –∞–Ω–∫–µ—Ç...",
                             reply_markup=types.ReplyKeyboardRemove())
        # –ü–æ–ª—É—á–∞–µ–º —Å–æ–±—Å—Ç–≤–µ–Ω–Ω—ã–π –ø—Ä–æ—Ñ–∏–ª—å (–¥–ª—è –∫—Ä–∏—Ç–µ—Ä–∏–µ–≤ –ø–æ–∏—Å–∫–∞)
        my_profile = db.get_profile(message.from_user.id)
        if not my_profile:
            await message.answer("–£ –≤–∞—Å –Ω–µ—Ç –∞–Ω–∫–µ—Ç—ã –¥–ª—è –ø–æ–∏—Å–∫–∞. –°–Ω–∞—á–∞–ª–∞ —Å–æ–∑–¥–∞–π—Ç–µ –∞–Ω–∫–µ—Ç—É.")
            await state.clear()
            return
        # –ò—â–µ–º –ø–µ—Ä–≤—É—é –ø–æ–¥—Ö–æ–¥—è—â—É—é –∞–Ω–∫–µ—Ç—É
        logger.info("get_next_profile(simple) ‚Üí %r", my_profile)
        result = db.get_next_profile(
            current_user_id=message.from_user.id,
            current_gender=my_profile['gender'],
            current_preference="–ü–∞—Ä–Ω–∏" if my_profile['looking_for'] == "–ü–∞—Ä–Ω–∏"
            else "–î–µ–≤—É—à–∫–∏",
            current_city = my_profile['city'] or '–ù–µ —É–∫–∞–∑–∞–Ω',
            current_lat = my_profile['lat'],
            current_lon = my_profile['lon']
        )
        if result:
            text = (f"{result['name']}, {result['age']}, {result.get('city') or '–ù–µ —É–∫–∞–∑–∞–Ω'}, ")
            if result['distance_km'] is not None:
                text += f"üìç {result['distance_km']} –∫–º"
            text += f"\n\n{result['bio'][:200]}"
        # –û–≥—Ä–∞–Ω–∏—á–∏–º –±–∏–æ ~300 —Å–∏–º–≤–æ–ª–æ–≤, —á—Ç–æ–±—ã –Ω–µ –ø–µ—Ä–µ–≥—Ä—É–∂–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ
            try:
                if result.get('photo_id'):
                    await message.answer_photo(result['photo_id'], caption=text, reply_markup=get_browse_keyboard(result['user_id']))
                else:
                    await message.answer(text,
                             reply_markup=get_browse_keyboard(result['user_id']))
            except Exception as e:
                logger.error(f"Failed to send profile {result['user_id']}: {e}")
        else:
            profile = db.get_profile(message.from_user.id)
            gender = profile['gender']
            await message.answer("–°–µ–π—á–∞—Å –Ω–µ—Ç –∞–Ω–∫–µ—Ç, —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏—Ö –≤–∞—à–∏–º –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º.", reply_markup=build_menu_keyboard(gender))
            await state.set_state(ProfileStates.MENU)
    elif message.text == "üåô –°–æ–Ω":
        return await message.answer("–ü–æ–∫–∞ —Ç–∞–∫–æ–π —Ñ—É–Ω–∫—Ü–∏–∏ –Ω–µ—Ç")
    elif message.text == "üëë –¢–æ–ø":
        return await message.answer("–ü–æ–∫–∞ —Ç–∞–∫–æ–π —Ñ—É–Ω–∫—Ü–∏–∏ –Ω–µ—Ç")

async def show_next_profile(callback: types.CallbackQuery):
    """–û—Ç–æ–±—Ä–∞–∂–∞–µ—Ç —Å–ª–µ–¥—É—é—â—É—é –∞–Ω–∫–µ—Ç—É –≤ —Ä–µ–∂–∏–º–µ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –∏–ª–∏ –∑–∞–≤–µ—Ä—à–∞–µ—Ç –ø—Ä–æ—Å–º–æ—Ç—Ä, –µ—Å–ª–∏ –∞–Ω–∫–µ—Ç –Ω–µ—Ç."""
    # –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∞–Ω–∫–µ—Ç—ã (—Ç–µ–∫—É—â–µ–µ) –ø–µ—Ä–µ–¥ –ø–æ–∫–∞–∑–æ–º —Å–ª–µ–¥—É—é—â–µ–π
    try:
        await callback.message.delete()
    except:
        pass
    user_id = callback.from_user.id
    my_profile = db.get_profile(user_id)
    result = None
    if my_profile:
        result = db.get_next_profile(current_user_id=user_id,
            current_gender=my_profile['gender'],
            current_preference="–ü–∞—Ä–Ω–∏" if my_profile['looking_for'] == "–ü–∞—Ä–Ω–∏"
            else "–î–µ–≤—É—à–∫–∏",
            current_city = my_profile['city'] or '–ù–µ —É–∫–∞–∑–∞–Ω',
            current_lat = my_profile['lat'],
            current_lon = my_profile['lon'])
    if result:
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–ª–µ–¥—É—é—â—É—é –∞–Ω–∫–µ—Ç—É
        text = (f"{result['name']}, {result['age']}, {result.get('city') or '–ù–µ —É–∫–∞–∑–∞–Ω'}, ")
        if result['distance_km'] is not None:
            text += f"üìç {result['distance_km']} –∫–º"
        text += f"\n\n{result['bio'][:200]}"

        try:
            if result.get('photo_id'):
                await callback.message.answer_photo(result['photo_id'], caption=text,
                                                    reply_markup=get_browse_keyboard(result['user_id']))
            else:
                await callback.message.answer(text, reply_markup=get_browse_keyboard(result['user_id']))
        except Exception as e:
            logger.error(f"Failed to send profile {result['user_id']}: {e}")
    else:
        # –ù–µ—Ç –±–æ–ª—å—à–µ –∞–Ω–∫–µ—Ç
        await callback.message.answer("–ê–Ω–∫–µ—Ç –±–æ–ª—å—à–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.", reply_markup=build_menu_keyboard(my_profile['gender']))
        # –í—ã—Ö–æ–¥–∏–º –∏–∑ —Ä–µ–∂–∏–º–∞ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞
        await callback.answer()  # –∑–∞–∫—Ä—ã–≤–∞–µ–º –∏–∫–æ–Ω–∫—É –∑–∞–≥—Ä—É–∑–∫–∏ –Ω–∞ –∫–Ω–æ–ø–∫–µ
        await callback.bot.delete_state(callback.from_user.id)  # –æ—á–∏—Å—Ç–∏—Ç—å FSM state


@router.callback_query(StateFilter(ProfileStates.BROWSING), F.data.startswith("like_"))
async def on_like(callback: types.CallbackQuery, state: FSMContext, bot : Bot):
    target_id = int(callback.data.split("_")[1])
    current_user = callback.from_user.id
    db.add_like(current_user, target_id)
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤–∑–∞–∏–º–Ω–æ–≥–æ –ª–∞–π–∫–∞
    if db.user_liked(target_id, current_user):
        # –ü–æ–ª—É—á–∞–µ–º –∏–º—è –æ–ø–ø–æ–Ω–µ–Ω—Ç–∞ –¥–ª—è —Å–æ–æ–±—â–µ–Ω–∏—è (–º–æ–∂–Ω–æ –±—ã–ª–æ –ø–µ—Ä–µ–¥–∞—Ç—å —á–µ—Ä–µ–∑ callback –∏–ª–∏ —Ö—Ä–∞–Ω–∏—Ç—å –≤ FSM –¥–∞–Ω–Ω—ã–µ —Ç–µ–∫—É—â–µ–π –∞–Ω–∫–µ—Ç—ã)
        target_profile = db.get_profile(target_id)
        name = target_profile['name'] if target_profile else "–≤–∞–º"
        # –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ —Ç–µ–∫—É—â–µ–º—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
        await callback.message.answer(f"‚ù§Ô∏è –£ –≤–∞—Å –≤–∑–∞–∏–º–Ω–∞—è —Å–∏–º–ø–∞—Ç–∏—è —Å {name}!")
        # –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –≤—Ç–æ—Ä–æ–º—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –æ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–∏
        try:
            user_name = (db.get_profile(current_user) or {}).get('name', '–≤–∞–º')
            await bot.send_message(target_id, f"‚ù§Ô∏è –£ –≤–∞—Å –≤–∑–∞–∏–º–Ω–∞—è —Å–∏–º–ø–∞—Ç–∏—è —Å {user_name}!")
        except Exception as e:
            logger.error(f"Failed to notify user {target_id} about match: {e}")
    # –ü–æ–∫–∞–∑ —Å–ª–µ–¥—É—é—â–µ–π –∞–Ω–∫–µ—Ç—ã
    await show_next_profile(callback)

@router.callback_query(StateFilter(ProfileStates.BROWSING), F.data.startswith("dislike_"))
async def on_dislike(callback: types.CallbackQuery, state: FSMContext):
    # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø—Ä–æ–ø—É—Å—Ç–∏–ª –∞–Ω–∫–µ—Ç—É
    await show_next_profile(callback)

@router.callback_query(StateFilter(ProfileStates.BROWSING), F.data == "exit_browse")
async def on_exit_browse(callback: types.CallbackQuery, state: FSMContext):
    # –í—ã–π—Ç–∏ –∏–∑ —Ä–µ–∂–∏–º–∞ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞
    await callback.message.delete()  # —É–¥–∞–ª—è–µ–º –ø–æ—Å–ª–µ–¥–Ω—é—é –ø–æ–∫–∞–∑–∞–Ω–Ω—É—é –∞–Ω–∫–µ—Ç—É
    await state.set_state(ProfileStates.MENU)
    user_id = callback.from_user.id
    my_profile = db.get_profile(user_id)
    await callback.message.answer("üìñ –í—ã –≤–µ—Ä–Ω—É–ª–∏—Å—å –≤ –º–µ–Ω—é.", reply_markup=build_menu_keyboard(my_profile['gender']))
