from aiogram import Router, types, F
from aiogram.fsm.context import FSMContext
from states.profile_states import ProfileStates
from keyboards.builders import *
from aiogram.filters import StateFilter
from database import db
from aiogram import Bot
import logging
from handlers.top import cmd_top
from aiogram.types import CallbackQuery, Message

logger = logging.getLogger(__name__)



router = Router()

@router.message(StateFilter(ProfileStates.MENU))
async def process_choose(message: types.Message, state: FSMContext):
    valid_answer = ["üîç –°–º–æ—Ç—Ä–µ—Ç—å –ê–Ω–∫–µ—Ç—ã", "üë®üèº –ú–æ—è –ê–Ω–∫–µ—Ç–∞", "üëë –¢–æ–ø", "üåô –°–æ–Ω", "üë©üèª‚Äçü¶∞ –ú–æ—è –ê–Ω–∫–µ—Ç–∞"]
    if message.text not in valid_answer:
        return await message.answer("–ù–µ—Ç —Ç–∞–∫–æ–≥–æ –≤–∞—Ä–∏–∞–Ω—Ç–∞ –æ—Ç–≤–µ—Ç–∞")

    elif message.text == "üë®üèº –ú–æ—è –ê–Ω–∫–µ—Ç–∞" or message.text == "üë©üèª‚Äçü¶∞ –ú–æ—è –ê–Ω–∫–µ—Ç–∞":
        # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –≤ —Ä–µ–∂–∏–º —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –ø—Ä–æ—Ñ–∏–ª—è
        await state.set_state(ProfileStates.EDIT_PROFILE)
        # –£–±–∏—Ä–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –º–µ–Ω—é, —á—Ç–æ–±—ã –Ω–µ –º–µ—à–∞–ª–∞ (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
        await message.answer("‚è≥ –û—Ç–∫—Ä—ã–≤–∞–µ–º —Ç–≤–æ—é –∞–Ω–∫–µ—Ç—É...",
                         reply_markup=types.ReplyKeyboardRemove())
        # –ü–æ–ª—É—á–∞–µ–º –ø—Ä–æ—Ñ–∏–ª—å –∏–∑ –±–∞–∑—ã
        profile = db.get_profile(message.from_user.id)
        if profile:
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–æ—Ç–æ+–¥–∞–Ω–Ω—ã–µ –ø—Ä–æ—Ñ–∏–ª—è —Å –∏–Ω–ª–∞–π–Ω-–∫–Ω–æ–ø–∫–∞–º–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
            caption = (f"{profile['name']}, "
                   f"{profile['age']}, "
                   f"{profile['city'] or '–ù–µ —É–∫–∞–∑–∞–Ω'}\n\n"
                   f" {profile['bio'][:1000]}\n\n"
                   f" ü™ô {profile['balance']}, —Ç–æ–ø 2228")
            if profile.get('photo_id'):
                await message.answer_photo(profile['photo_id'], caption=caption,
                                   reply_markup=get_edit_menu_kb())
            else:
                await message.answer(caption, reply_markup=get_edit_menu_kb())
        else:
            await message.answer("–£ –≤–∞—Å –µ—â—ë –Ω–µ—Ç –∞–Ω–∫–µ—Ç—ã. –í–≤–µ–¥–∏—Ç–µ /start –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏.")
    elif message.text == "üîç –°–º–æ—Ç—Ä–µ—Ç—å –ê–Ω–∫–µ—Ç—ã":
        # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –≤ —Ä–µ–∂–∏–º –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —á—É–∂–∏—Ö –∞–Ω–∫–µ—Ç
        await state.set_state(ProfileStates.BROWSING)
        # –£–±–∏—Ä–∞–µ–º –º–µ–Ω—é-–∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
        await message.answer("‚è≥ –ü–æ–∏—Å–∫ –∞–Ω–∫–µ—Ç...",
                             reply_markup=types.ReplyKeyboardRemove())
        # –ü–æ–ª—É—á–∞–µ–º —Å–æ–±—Å—Ç–≤–µ–Ω–Ω—ã–π –ø—Ä–æ—Ñ–∏–ª—å (–¥–ª—è –∫—Ä–∏—Ç–µ—Ä–∏–µ–≤ –ø–æ–∏—Å–∫–∞)
        my_profile = db.get_profile(message.from_user.id)
        if not my_profile:
            await message.answer("–£ –≤–∞—Å –Ω–µ—Ç –∞–Ω–∫–µ—Ç—ã –¥–ª—è –ø–æ–∏—Å–∫–∞. –°–Ω–∞—á–∞–ª–∞ —Å–æ–∑–¥–∞–π—Ç–µ –∞–Ω–∫–µ—Ç—É.")
            await state.clear()
            return
        # –ò—â–µ–º –ø–µ—Ä–≤—É—é –ø–æ–¥—Ö–æ–¥—è—â—É—é –∞–Ω–∫–µ—Ç—É
        logger.info("get_next_profile(simple) ‚Üí %r", my_profile)
        result = db.get_next_profile(
            current_user_id    = message.from_user.id,
            current_gender     = my_profile['gender'],
            current_preference = my_profile['looking_for'],
            user_lat           = my_profile['lat'],
            user_lon           = my_profile['lon']
        )
        if result:
            text = (f"{result['name']}, {result['age']}, {result.get('city') or '–ù–µ —É–∫–∞–∑–∞–Ω'}, ")
            if result['distance_km'] is not None:
                text += f"üìç {result['distance_km']} –∫–º"
            text += f"\n\n{result['bio'][:200]}"
        # –û–≥—Ä–∞–Ω–∏—á–∏–º –±–∏–æ ~300 —Å–∏–º–≤–æ–ª–æ–≤, —á—Ç–æ–±—ã –Ω–µ –ø–µ—Ä–µ–≥—Ä—É–∂–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ
            try:
                if result.get('photo_id'):
                    await message.answer_photo(result['photo_id'], caption=text, reply_markup=get_browse_keyboard(result['user_id']))
                else:
                    await message.answer(text,
                             reply_markup=get_browse_keyboard(result['user_id']))
            except Exception as e:
                logger.error(f"Failed to send profile {result['user_id']}: {e}")
        else:
            profile = db.get_profile(message.from_user.id)
            gender = profile['gender']
            await message.answer("–°–µ–π—á–∞—Å –Ω–µ—Ç –∞–Ω–∫–µ—Ç, —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏—Ö –≤–∞—à–∏–º –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º.", reply_markup=build_menu_keyboard(gender))
            await state.set_state(ProfileStates.MENU)
    elif message.text == "üåô –°–æ–Ω":
        return await message.answer("–ü–æ–∫–∞ –Ω–µ—Ç —Ç–∞–∫–æ–π —Ñ—É–Ω–∫—Ü–∏–∏")
    elif message.text == "üëë –¢–æ–ø":
        await cmd_top(message, state)



async def show_next_profile(event: CallbackQuery | Message, state: FSMContext):
    """
    –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å–ª–µ–¥—É—é—â—É—é –∞–Ω–∫–µ—Ç—É.
    –ü—Ä–∏–Ω–∏–º–∞–µ—Ç –ª–∏–±–æ CallbackQuery (–Ω–∞–∂–∞—Ç–∏–µ –∫–Ω–æ–ø–∫–∏), –ª–∏–±–æ Message (–ø–æ—Å–ª–µ FSM).
    """

    # 1) Ack + —É–±—Ä–∞—Ç—å —Å—Ç–∞—Ä—É—é –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
    if isinstance(event, CallbackQuery):
        await event.answer()
        await event.message.edit_reply_markup(reply_markup=None)
        user_id = event.from_user.id
        send_photo = event.message.answer_photo
        send_text  = event.message.answer
    else:
        user_id = event.from_user.id
        send_photo = event.answer_photo
        send_text  = event.answer

    # 2) –ë–µ—Ä—ë–º —Å–≤–æ–π –ø—Ä–æ—Ñ–∏–ª—å (—Å–æ–¥–µ—Ä–∂–∏—Ç –≤—Å–µ –ø–æ–ª—è)
    current = db.get_user(user_id)
    if not current:
        await send_text("‚ùó –°–Ω–∞—á–∞–ª–∞ —Å–æ–∑–¥–∞–π—Ç–µ –ø—Ä–æ—Ñ–∏–ª—å –∫–æ–º–∞–Ω–¥–æ–π /start")
        return

    # 3) –ë–µ—Ä—ë–º —Ñ–∏–ª—å—Ç—Ä—ã –∏ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã
    gender     = current.get("gender")
    preference = current.get("looking_for")
    lat        = current.get("lat")
    lon        = current.get("lon")

    if not gender or not preference:
        await send_text("‚ùó –ó–∞–ø–æ–ª–Ω–∏—Ç–µ –ø–æ–ª –∏ –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏–µ –≤ –ø—Ä–æ—Ñ–∏–ª–µ.")
        return

    # 4) –î–æ—Å—Ç–∞—ë–º —Å–ª–µ–¥—É—é—â—É—é –∞–Ω–∫–µ—Ç—É
    try:
        result = db.get_next_profile(
            current_user_id    = user_id,
            current_gender     = gender,
            current_preference = preference,
            user_lat           = lat,
            user_lon           = lon
        )
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ get_next_profile: {e}")
        await send_text("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å —Å–ª–µ–¥—É—é—â—É—é –∞–Ω–∫–µ—Ç—É, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
        return

    # 5) –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
    if not result:
        await send_text("üò¢ –ë–æ–ª—å—à–µ –∞–Ω–∫–µ—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.")
        await state.clear()
        return

    # 6) –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –ø–æ–ª–µ–π
    name = result.get("name", "‚Äî")
    age  = result.get("age", "‚Äî")
    looking_for = result.get("looking_for", "‚Äî")
    city = result.get("city", "‚Äî")

    # distance_km –º–æ–∂–µ—Ç –±—ã—Ç—å None
    dist = result.get("distance_km")
    if dist is None:
        distance_str = "üöó —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–µ –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"
    else:
        distance_str = f"üöó {dist:.1f} –∫–º"

    # balance –º–æ–∂–µ—Ç –±—ã—Ç—å None
    balance = result.get("balance")
    if balance is None:
        balance_str = "ü™ô 0"
    else:
        balance_str = f"ü™ô {balance}"

    bio = result.get("bio")
    bio_str = f"\n{bio}" if bio else ""

    # 7) –°–æ–±–∏—Ä–∞–µ–º —Ç–µ–∫—Å—Ç
    text = (
        f"üë§ {name}, {age}\n"
        f"üíñ –ò—â–µ—Ç: {looking_for}\n"
        f"üìç –ì–æ—Ä–æ–¥: {city}\n"
        f"{distance_str}\n"
        f"{balance_str}"
        f"{bio_str}"
    )

    # 8) –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞
    kb = get_browse_keyboard(result["user_id"])

    # 9) –û—Ç–ø—Ä–∞–≤–∫–∞ –ø—Ä–æ—Ñ–∏–ª—è
    photo = result.get("photo_id")
    if photo:
        await send_photo(photo=photo, caption=text, reply_markup=kb)
    else:
        await send_text(text, reply_markup=kb)

    # 10) –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    await state.set_state(ProfileStates.BROWSING)




