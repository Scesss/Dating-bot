from keyboards.builders import *
from aiogram import Bot
from database.db import *
from typing import Union
from aiogram.types import Message, CallbackQuery, ReplyKeyboardRemove
from aiogram.types import InputMediaPhoto
from handlers.edit_profile import *
from .matches import show_match_profile
from handlers.menu import show_next_profile
# ‚Ä¶ –æ—Å—Ç–∞–ª—å–Ω—ã–µ –∏–º–ø–æ—Ä—Ç—ã ‚Ä¶




logger = logging.getLogger(__name__)

# Create router for common commands
common_router = Router()


@router.message(Command("search"))
async def cmd_search(message: Message, state: FSMContext):
    """
    /search ‚Äî —Ç–æ –∂–µ, —á—Ç–æ –ø—Ä–æ—Å–º–æ—Ç—Ä –∞–Ω–∫–µ—Ç –∏–∑ –º–µ–Ω—é.
    """
    # –°–±—Ä–∞—Å—ã–≤–∞–µ–º –≤—Å—ë –∏ –∑–∞–ø—É—Å–∫–∞–µ–º –ø–æ–∫–∞–∑ –ø–µ—Ä–≤–æ–π –∞–Ω–∫–µ—Ç—ã
    await state.clear()
    await message.answer("üîç –ù–∞—á–∏–Ω–∞–µ–º –ø–æ–∏—Å–∫ –∞–Ω–∫–µ—Ç...")
    # –ü—Ä–æ—Å—Ç–æ –≤—ã–∑—ã–≤–∞–µ–º —Ç—É –∂–µ —Ñ—É–Ω–∫—Ü–∏—é, —á—Ç–æ –∏ –ø—Ä–∏ –ø—Ä–æ—Å–º–æ—Ç—Ä–µ –∏–∑ –º–µ–Ω—é
    await show_next_profile(message, state)


async def show_profile_info(message: types.Message, profile: dict, for_self: bool = True) -> [[int], [list]]:
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –∞–Ω–∫–µ—Ç—ã.
    profile ‚Äì —Å–ª–æ–≤–∞—Ä—å —Å –¥–∞–Ω–Ω—ã–º–∏ –ø—Ä–æ—Ñ–∏–ª—è –∏–∑ –ë–î."""
    # –°–æ–±–∏—Ä–∞–µ–º —Ç–µ–∫—Å—Ç
    rank = db.get_user_rank(profile['user_id'])
    caption = (f"{profile['name']}, "
               f"{profile['age']}, "
               f"{profile['city'] or '–ù–µ —É–∫–∞–∑–∞–Ω'}\n\n"
               f" {profile['bio'][:1000]}\n\n"
               f" ü™ô {profile['balance']}, —Ç–æ–ø {rank}")
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–æ—Ç–æ —Å –ø–æ–¥–ø–∏—Å—å—é, –µ—Å–ª–∏ –µ—Å—Ç—å —Ñ–æ—Ç–æ

    try:
        if profile.get('photo_id'):
            await message.answer_photo(profile['photo_id'], caption=caption, parse_mode  = None)
        else:
            await message.answer(caption)
    except Exception as e:
        logger.error(f"Failed to send profile info: {e}")
    return [profile['photo_id'], caption]


@common_router.message(Command("start"))
async def cmd_start(message: types.Message, state: FSMContext, bot : Bot):

    await state.clear()
    user_id = message.from_user.id
    logger.info(f"Start command from {user_id}")
    profile = db.get_profile(user_id)


    if profile:
        await message.answer("üìÑ –•–æ—Ç–∏—Ç–µ –Ω–∞—á–∞—Ç—å –≤—Å–µ —Å —á–∏—Å—Ç–æ–≥–æ –ª–∏—Å—Ç–∞?", reply_markup=build_restart_keyboard())
        await state.set_state(ProfileStates.RESTART)
        # # –ï—Å–ª–∏ –ø—Ä–æ—Ñ–∏–ª—å –µ—Å—Ç—å ‚Äì –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –µ–≥–æ
        # gender = profile["gender"] if profile else "–ü–∞—Ä–µ–Ω—å"
        # await message.answer("‚è≥ –û—Ç–∫—Ä—ã–≤–∞–µ–º –∞–Ω–∫–µ—Ç—É...", reply_markup=build_menu_keyboard(gender))
        # # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –º–µ–Ω—é (–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω)
        # await state.set_state(ProfileStates.MENU)
        # # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –∞–Ω–∫–µ—Ç—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é (—Å–º. —Å–ª–µ–¥—É—é—â–∏–π —Ä–∞–∑–¥–µ–ª –æ —Ñ–æ—Ä–º–∞—Ç–µ –≤—ã–≤–æ–¥–∞)
        # await show_profile_info(message, profile)
    else:
        # –ï—Å–ª–∏ –ø—Ä–æ—Ñ–∏–ª—è –Ω–µ—Ç ‚Äì –∑–∞–ø—É—Å–∫–∞–µ–º —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é
        await state.set_state(ProfileStates.NAME)
        await message.answer("–ö–∞–∫ —Ç–µ–±—è –∑–æ–≤—É—Ç?", reply_markup=build_cancel_keyboard())

@common_router.message(Command("profile"))
async def cmd_profile(message: types.Message, state: FSMContext, bot : Bot):
    member = await bot.get_chat_member(chat_id="@CafeDateInc", user_id=message.from_user.id)
    if member.status in ("left", "kicked"):
        await message.answer("‚ùóÔ∏è–î–ª—è —Ä–∞–±–æ—Ç—ã –±–æ—Ç–∞ –ø–æ–¥–ø–∏—à–∏—Ç–µ—Å—å –Ω–∞ –Ω–∞—à –∫–∞–Ω–∞–ª: @CafeDateInc")
        return

    await state.clear()
    user_id = message.from_user.id
    logger.info(f"Start command from {user_id}")
    profile = db.get_profile(user_id)

    if profile:
        # # await show_profile_info(message, profile)
        # photo_id, caption = await show_profile_info(message, profile)
        # # –ï—Å–ª–∏ –ø—Ä–æ—Ñ–∏–ª—å –µ—Å—Ç—å ‚Äì –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –µ–≥–æ
        # await state.set_state(ProfileStates.EDIT_PROFILE)
        # await on_edit_params(callback=show_profile_info)

        await state.set_state(ProfileStates.EDIT_PROFILE)
        # –£–±–∏—Ä–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –º–µ–Ω—é, —á—Ç–æ–±—ã –Ω–µ –º–µ—à–∞–ª–∞ (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
        await message.answer("‚è≥ –û—Ç–∫—Ä—ã–≤–∞–µ–º —Ç–≤–æ—é –∞–Ω–∫–µ—Ç—É...",
                         reply_markup=types.ReplyKeyboardRemove())
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–æ—Ç–æ+–¥–∞–Ω–Ω—ã–µ –ø—Ä–æ—Ñ–∏–ª—è —Å –∏–Ω–ª–∞–π–Ω-–∫–Ω–æ–ø–∫–∞–º–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
        rank = db.get_user_rank(profile['user_id'])
        caption = (f"{profile['name']}, "
        f"{profile['age']}, "
        f"{profile['city'] or '–ù–µ —É–∫–∞–∑–∞–Ω'}\n\n"
        f" {profile['bio'][:1000]}\n\n"
        f" ü™ô {profile['balance']}, —Ç–æ–ø {rank}")
        if profile.get('photo_id'):
            await message.answer_photo(profile['photo_id'], caption=caption,
            reply_markup=get_edit_menu_kb(), parse_mode  = None)
        else:
            await message.answer(caption, reply_markup=get_edit_menu_kb())
    else:
        # –ï—Å–ª–∏ –ø—Ä–æ—Ñ–∏–ª—è –Ω–µ—Ç ‚Äì –∑–∞–ø—É—Å–∫–∞–µ–º —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é
        await state.set_state(ProfileStates.NAME)
        await message.answer("–ö–∞–∫ —Ç–µ–±—è –∑–æ–≤—É—Ç?", reply_markup=build_cancel_keyboard())

async def show_liked_profile(src: Union[Message, CallbackQuery], state: FSMContext):
    data = await state.get_data()
    idx = data["likes_index"]
    likers = data["liked_ids"]
    prof   = likers[idx]           # —Å—Ä–∞–∑—É –±–µ—Ä—ë–º –≤—Å—é –∑–∞–ø–∏—Å—å –ø—Ä–æ—Ñ–∏–ª—è + like_message + like_amount
    target_id = prof["user_id"]

    rank = db.get_user_rank(prof['user_id'])
    text = (f"{prof['name']}, {prof['age']}, {prof.get('city') or '–ù–µ —É–∫–∞–∑–∞–Ω'}")
    if prof.get("distance_km") is not None:
        text += f", üìç {prof['distance_km']:.1f} –∫–º"
    text += (f"\n\n{prof['bio'][:200]}\n\n"
                    f" ü™ô {prof['balance']}, —Ç–æ–ø {rank}")
    
    # –µ—Å–ª–∏ –±—ã–ª —Ç–µ–∫—Å—Ç–æ–≤—ã–π –ª–∞–π–∫
    if prof.get("like_amount"):
        text += f"\n\nüí∞ –ü–µ—Ä–µ–¥–∞–Ω–æ: {prof['like_amount']} –º–æ–Ω–µ—Ç"
    # –µ—Å–ª–∏ –æ—Å—Ç–∞–≤–∏–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ
    if prof.get("like_message"):
        text += f"\n\nüí¨ ¬´{prof['like_message']}¬ª"
    
    kb = InlineKeyboardMarkup(
        inline_keyboard=[[
            InlineKeyboardButton(
                text="‚ù§Ô∏è –ü–æ—Å—Ç–∞–≤–∏—Ç—å –ª–∞–π–∫",
                callback_data=f"likes_accept:{prof['user_id']}"
            ),
            InlineKeyboardButton(
                text="üíî –î–∏–∑–ª–∞–π–∫",
                callback_data=f"likes_decline:{prof['user_id']}"
            )
        ]]
    )
    if isinstance(src, Message):
        await src.answer_photo(photo=prof["photo_id"], caption=text, reply_markup=kb, parse_mode  = None)
    else:  # CallbackQuery
        await src.message.edit_media(
            InputMediaPhoto(media=prof["photo_id"], caption=text),
            reply_markup=kb,
            parse_mode  = None
        )

@common_router.message(Command("likes"))
async def cmd_likes(message: types.Message, state: FSMContext):
    me = message.from_user.id
    # 1) –ò–∑–≤–ª–µ–∫–∞–µ–º –≤—Å–µ—Ö, –∫—Ç–æ –ª–∞–π–∫–Ω—É–ª –≤–∞—Å
    raw = db.get_liked_by(me)

    # 2) –§–∏–ª—å—Ç—Ä—É–µ–º —Ç–µ—Ö, –∫–æ–≥–æ –≤—ã —É–∂–µ –ª–∞–π–∫–Ω—É–ª–∏ –∏–ª–∏ –¥–∏–∑–ª–∞–π–∫–Ω—É–ª–∏
    likers = [
        prof for prof in raw
        if not db.user_liked(me, prof['user_id'])
        and not user_disliked(me, prof['user_id'])
    ]

    db.mark_likes_seen(me)

    profile = db.get_profile(me)
    gender = profile["gender"] if profile else "–ü–∞—Ä–µ–Ω—å"

    if not likers:
        await message.answer(
            "–ù–æ–≤—ã—Ö –ª–∞–π–∫–æ–≤ –Ω–µ—Ç ‚è≥ –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –≤ –º–µ–Ω—é‚Ä¶",
            reply_markup=build_menu_keyboard(gender)
        )
        return

    # 3) –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ state –æ—Ç—Ñ–∏–ª—å—Ç—Ä–æ–≤–∞–Ω–Ω—ã–π —Å–ø–∏—Å–æ–∫
    await state.update_data(liked_ids=likers, likes_index=0)
    await state.set_state(ProfileStates.LIKES)

    # 4) –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—É—é –∞–Ω–∫–µ—Ç—É
    await show_liked_profile(message, state)

@common_router.message(Command("matches"))
async def cmd_matches(message: Message, state: FSMContext):
    user_id = message.from_user.id
    match_ids = db.get_matches(user_id)  # –∏–∑ database.db

    if not match_ids:
        # –µ—Å–ª–∏ –Ω–µ—Ç –Ω–∏ –æ–¥–Ω–æ–≥–æ –º–∞—Ç—á–∞
        profile = db.get_profile(user_id)
        await message.answer(
            "–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –º—ç—Ç—á–µ–π.",
            reply_markup=build_menu_keyboard(profile["gender"])
        )
        await state.set_state(ProfileStates.MENU)
        return

    # —Å–æ—Ö—Ä–∞–Ω—è–µ–º –≤ FSM
    await state.update_data(match_ids=match_ids, match_index=0)
    await state.set_state(ProfileStates.MATCHES)

    # —Å—Ä–∞–∑—É –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–π –º–∞—Ç—á
    await message.answer("‚è≥ –û—Ç–∫—Ä—ã–≤–∞–µ–º –º—ç—Ç—á–∏...",
                         reply_markup=types.ReplyKeyboardRemove())
    await show_match_profile(message, state)

@common_router.message(Command("menu"))
async def cmd_menu(message: types.Message, state: FSMContext, bot : Bot):
    member = await bot.get_chat_member(chat_id="@CafeDateInc", user_id=message.from_user.id)

    if member.status in ("left", "kicked"):
        await message.answer("‚ùóÔ∏è–î–ª—è —Ä–∞–±–æ—Ç—ã –±–æ—Ç–∞ –ø–æ–¥–ø–∏—à–∏—Ç–µ—Å—å –Ω–∞ –Ω–∞—à –∫–∞–Ω–∞–ª: @CafeDateInc")
        return

    user_id = message.from_user.id
    unseen_likes   = db.get_unseen_likes_count(user_id)
    unseen_matches= db.get_unseen_matches_count(user_id)
    notify_parts = []
    if unseen_likes:
        notify_parts.append(f"‚ù§Ô∏è –£ –≤–∞—Å {unseen_likes} –Ω–µ–ø—Ä–æ—Å–º–æ—Ç—Ä–µ–Ω–Ω—ã—Ö –ª–∞–π–∫–æ–≤")
    if unseen_matches:
        notify_parts.append(f"ü§ù –£ –≤–∞—Å {unseen_matches} –Ω–µ–ø—Ä–æ—Å–º–æ—Ç—Ä–µ–Ω–Ω—ã—Ö –º–∞—Ç—á–µ–π")
    if notify_parts:
        # –ø–æ—Å–ª–µ –ø–æ–∫–∞–∑–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –º–æ–∂–Ω–æ –æ—Ç–º–µ—Ç–∏—Ç—å –∏—Ö –∫–∞–∫ ¬´—É–≤–∏–¥–µ–Ω–Ω—ã–µ¬ª
        await message.answer("\n".join(notify_parts))
        db.mark_likes_seen(user_id)
        db.mark_matches_seen(user_id)

    await state.clear()
    user_id = message.from_user.id
    logger.info(f"Start command from {user_id}")
    profile = db.get_profile(user_id)

    if profile:
        await state.set_state(ProfileStates.MENU)
        user_id = message.from_user.id
        profile = get_profile(user_id)
        rank = db.get_user_rank(profile['user_id'])
        text = (f"{profile['name']}, "
                   f"{profile['age']}, "
                   f"{profile['city'] or '–ù–µ —É–∫–∞–∑–∞–Ω'}\n\n"
                   f" {profile['bio'][:1000]}\n\n"
                   f" ü™ô {profile['balance']}, —Ç–æ–ø {rank}")
        await message.answer(
            text="‚è≥ –ó–∞–≥—Ä—É–∂–∞—é –≤–∞—à –ø—Ä–æ—Ñ–∏–ª—å‚Ä¶", 
            reply_markup=ReplyKeyboardRemove()
        )
        menu_kb = build_menu_keyboard(profile["gender"])
        if profile.get('photo_id'):
            await message.answer_photo(
                photo=profile["photo_id"],
                caption=text,
                reply_markup=menu_kb,
                parse_mode  = None
            )
        else:
            await message.answer(
                text=text,
                reply_markup=menu_kb
            )

    else:
        # –ï—Å–ª–∏ –ø—Ä–æ—Ñ–∏–ª—è –Ω–µ—Ç ‚Äì –∑–∞–ø—É—Å–∫–∞–µ–º —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é
        await state.set_state(ProfileStates.NAME)
        await message.answer("–ö–∞–∫ —Ç–µ–±—è –∑–æ–≤—É—Ç?", reply_markup=build_cancel_keyboard())


@common_router.message(Command("referral"))
async def referral_handler(state: FSMContext, message: types.Message):
    # await state.clear()
    user_id = message.from_user.id
    logger.info(f"Start command from {user_id}")
    profile = db.get_profile(user_id)

    if not profile:
        await state.set_state(ProfileStates.NAME)
        await message.answer("–ö–∞–∫ —Ç–µ–±—è –∑–æ–≤—É—Ç?", reply_markup=build_cancel_keyboard())


    user_id = message.from_user.id
    code = db.ensure_referral_code(user_id)
    count = db.count_successful_referrals(user_id)
    link = f"https://t.me/CafeDateBot?start={code}"
    text = (
        "üéÅ –ü—Ä–∏–≤–µ–¥–∏ –¥—Ä—É–≥–∞ –∏ –≤—ã –æ–±–∞ –ø–æ–ª—É—á–∏—Ç–µ 5–ö –≥–µ–º–æ–≤ üíé\n\n"
        "‚ùå –ó–∞–ø—Ä–µ—â–∞–µ—Ç—Å—è –∞–±—É–∑–∏—Ç—å —Ç–≤–∏–Ω–∫-–∞–∫–∫–∞—É–Ω—Ç—ã. –ó–∞ –ø–æ–¥–æ–±–Ω—ã–µ —Å—Ö–µ–º—ã –∞–∫–∫–∞—É–Ω—Ç –±—É–¥–µ—Ç –∑–∞–±–∞–Ω–µ–Ω –Ω–∞–≤—Å–µ–≥–¥–∞\n\n"
        "üìï –£—Å–ª–æ–≤–∏—è: –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å, –∫–æ—Ç–æ—Ä–æ–≥–æ —Ç—ã –ø—Ä–∏–≤–µ–¥—ë—à—å, –¥–æ–ª–∂–µ–Ω –ø–æ–ª–Ω–æ—Å—Ç—å—é –∑–∞–ø–æ–ª–Ω–∏—Ç—å –∞–Ω–∫–µ—Ç—É –∏ –ø–æ–ª—É—á–∏—Ç—å 10 –ª–∞–π–∫–æ–≤\n\n"
        f"–í–æ—Ç —Ç–≤–æ—è —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è —Å—Å—ã–ª–∫–∞: {link}\n\n"
        f"–¢—ã –ø—Ä–∏–≤–µ–ª(–∞) —é–∑–µ—Ä–æ–≤ –∑–∞ –≤—Å–µ –≤—Ä–µ–º—è: {count}"
    )
    await message.answer(text)


# Export the router
__all__ = ['common_router']