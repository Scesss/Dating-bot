from aiogram import Router, types
from aiogram.filters import Command
from aiogram.fsm.context import FSMContext
from states.profile_states import ProfileStates
from keyboards.builders import build_cancel_keyboard
from keyboards.builders import build_menu_keyboard
from database import db
from aiogram import Bot
import logging


logger = logging.getLogger(__name__)

# Create router for common commands
common_router = Router()



async def show_profile_info(message: types.Message, profile: dict, for_self: bool = True):
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –∞–Ω–∫–µ—Ç—ã.
    profile ‚Äì —Å–ª–æ–≤–∞—Ä—å —Å –¥–∞–Ω–Ω—ã–º–∏ –ø—Ä–æ—Ñ–∏–ª—è –∏–∑ –ë–î."""
    # –°–æ–±–∏—Ä–∞–µ–º —Ç–µ–∫—Å—Ç

    caption = (
        ( "üåü –≠—Ç–æ —Ç–≤–æ—è –∞–Ω–∫–µ—Ç–∞:\n\n" if for_self else "" ) +
        f"üë§ –ò–º—è: {profile.get('name', 'N/A')}\n"
        f"üéÇ –í–æ–∑—Ä–∞—Å—Ç: {profile.get('age', 'N/A')}\n"
        f"üöª –ü–æ–ª: {profile.get('gender', 'N/A')}\n"
        f"üíò –ò—â–µ—Ç: {profile.get('looking_for', 'N/A')}\n"
        f"üìç –ì–æ—Ä–æ–¥: {profile.get('city') or '–ù–µ —É–∫–∞–∑–∞–Ω'}\n"
        f"üìñ –û —Å–µ–±–µ: { (profile.get('bio') or '–ù/–î')[:1000] }"
    )
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–æ—Ç–æ —Å –ø–æ–¥–ø–∏—Å—å—é, –µ—Å–ª–∏ –µ—Å—Ç—å —Ñ–æ—Ç–æ

    try:
        if profile.get('photo_id'):
            await message.answer_photo(profile['photo_id'], caption=caption)
        else:
            await message.answer(caption)
    except Exception as e:
        logger.error(f"Failed to send profile info: {e}")


@common_router.message(Command("start"))
async def cmd_start(message: types.Message, state: FSMContext, bot: Bot):
    member = await bot.get_chat_member(chat_id="@CafeDateInc", user_id=message.from_user.id)
    if member.status in ("left", "kicked"):
        await message.answer("‚ùóÔ∏è–î–ª—è —Ä–∞–±–æ—Ç—ã –±–æ—Ç–∞ –ø–æ–¥–ø–∏—à–∏—Ç–µ—Å—å –Ω–∞ –Ω–∞—à –∫–∞–Ω–∞–ª: @CafeDateInc")
        return

    await state.clear()
    user_id = message.from_user.id
    logger.info(f"Start command from {user_id}")
    profile = db.get_profile(user_id)


    if profile:
        # –ï—Å–ª–∏ –ø—Ä–æ—Ñ–∏–ª—å –µ—Å—Ç—å ‚Äì –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –µ–≥–æ
        await message.answer("üåü –≠—Ç–æ —Ç–≤–æ—è –∞–Ω–∫–µ—Ç–∞:", reply_markup=build_menu_keyboard())
        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –º–µ–Ω—é (–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω)
        await state.set_state(ProfileStates.MENU)
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –∞–Ω–∫–µ—Ç—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é (—Å–º. —Å–ª–µ–¥—É—é—â–∏–π —Ä–∞–∑–¥–µ–ª –æ —Ñ–æ—Ä–º–∞—Ç–µ –≤—ã–≤–æ–¥–∞)
        await show_profile_info(message, profile)
    else:
        # –ï—Å–ª–∏ –ø—Ä–æ—Ñ–∏–ª—è –Ω–µ—Ç ‚Äì –∑–∞–ø—É—Å–∫–∞–µ–º —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é
        await state.set_state(ProfileStates.NAME)
        await message.answer("–ö–∞–∫ —Ç–µ–±—è –∑–æ–≤—É—Ç?", reply_markup=build_cancel_keyboard())

@common_router.message(Command("profile"))
async def cmd_profile(message: types.Message, state: FSMContext):
    await cmd_start(message, state)

# Export the router
__all__ = ['common_router']