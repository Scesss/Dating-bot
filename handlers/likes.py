from aiogram import Router, F
from aiogram.types import CallbackQuery, Message
from aiogram.filters.state import StateFilter
from aiogram.fsm.context import FSMContext
from database import db
from states.profile_states import ProfileStates
from handlers.common import show_liked_profile
from keyboards.builders import *
from aiogram.exceptions import TelegramBadRequest
from handlers.menu import show_next_profile  
from database.db import *


router = Router()

@router.callback_query(
    StateFilter(ProfileStates.LIKES),
    F.data.startswith("likes_accept:")
)
async def on_like_accept(call: CallbackQuery, state: FSMContext):
    data   = await state.get_data()
    likers = data.get("liked_ids", [])
    idx    = data.get("likes_index", 0) + 1
    me = call.from_user.id
    target = int(call.data.split(":", 1)[1])
    # 1) –ó–∞–ø–∏—à–µ–º —Å–≤–æ–π –ª–∞–π–∫
    add_like(me, target)
    # 2) –ï—Å–ª–∏ –≤–∑–∞–∏–º–Ω—ã–π ‚Äî –∑–∞–º–∞—Ç—á–∏–º
    if user_liked(target, me):
        add_match(me, target)
        # —É–≤–µ–¥–æ–º–ª—è–µ–º –∏–Ω–∏—Ü–∏–∞—Ç–æ—Ä–∞
        my_name     = db.get_profile(me)["name"]
        target_name = db.get_profile(target)["name"]
        
        await call.message.answer(f"üéâ –≠—Ç–æ –≤–∑–∞–∏–º–Ω—ã–π –ª–∞–π–∫! –£ –≤–∞—Å –Ω–æ–≤—ã–π –º–∞—Ç—á —Å {target_name}!")

        add_match(target, me)
        # —É–≤–µ–¥–æ–º–ª—è–µ–º –ø–æ–ª—É—á–∞—Ç–µ–ª—è

        target_unseen = db.get_unseen_matches_count(target)
        await call.bot.send_message(
            target,
            f"ü§ù –£ –≤–∞—Å {target_unseen} –Ω–µ–ø—Ä–æ—Å–º–æ—Ç—Ä–µ–Ω–Ω—ã—Ö –º–∞—Ç—á–µ–π!"
        )

    # –ö–æ–≥–¥–∞ –∫–∞–Ω–¥–∏–¥–∞—Ç—ã –∫–æ–Ω—á–∏–ª–∏—Å—å ‚Äî —É–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –º–µ–Ω—é
    if idx >= len(likers):
        await state.set_state(ProfileStates.MENU)
        # –ø–æ–ø—Ä–æ–±—É–µ–º —É–¥–∞–ª–∏—Ç—å —Å—Ç–∞—Ä–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ-–∫–∞—Ä—Ç–æ—á–∫—É
        try:
            await call.message.delete()
        except TelegramBadRequest:
            pass
        # –ø–æ–∫–∞–∂–µ–º –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
        profile = db.get_profile(call.from_user.id)
        gender  = profile.get("gender") if profile else "–ü–∞—Ä–µ–Ω—å"
        await call.message.answer(
            "–ê–Ω–∫–µ—Ç—ã –∑–∞–∫–æ–Ω—á–∏–ª–∏—Å—å ‚è≥ –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –≤ –º–µ–Ω—é‚Ä¶",
            reply_markup=build_menu_keyboard(gender)
        )
        await state.set_state(ProfileStates.MENU)
        await call.answer()
        return

    # –ò–Ω–∞—á–µ ‚Äî –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–ª–µ–¥—É—é—â—É—é –∞–Ω–∫–µ—Ç—É
    await state.update_data(likes_index=idx)
    await show_liked_profile(call, state)
    await call.answer()


@router.callback_query(
    StateFilter(ProfileStates.BROWSING),
    F.data.startswith("dislike:")
)
async def on_like_decline(call: CallbackQuery, state: FSMContext):
    me = call.from_user.id
    target = int(call.data.split(":", 1)[1])
    # –ó–∞–ø–∏—à–µ–º –¥–∏–∑–ª–∞–π–∫
    add_dislike(me, target)
    await call.answer()
    # –ø–æ–∫–∞–∑–∞—Ç—å —Å–ª–µ–¥—É—é—â–∏–π –ø—Ä–æ—Ñ–∏–ª—å
    await show_next_profile(call, state)
    

# –ü—Ä–æ—Å—Ç–æ–π –ª–∞–π–∫ (–∫–∞–∫ –±—ã–ª–æ —Ä–∞–Ω—å—à–µ)
@router.callback_query(ProfileStates.BROWSING, F.data.startswith("like_simple:"))
async def like_simple(call: CallbackQuery, state: FSMContext):
    target = int(call.data.split(":")[1])
    add_like(call.from_user.id, target)
    
    if db.user_liked(target, call.from_user.id):
        # –ü–æ–ª—É—á–∞–µ–º –∏–º—è –æ–ø–ø–æ–Ω–µ–Ω—Ç–∞ –¥–ª—è —Å–æ–æ–±—â–µ–Ω–∏—è (–º–æ–∂–Ω–æ –±—ã–ª–æ –ø–µ—Ä–µ–¥–∞—Ç—å —á–µ—Ä–µ–∑ callback –∏–ª–∏ —Ö—Ä–∞–Ω–∏—Ç—å –≤ FSM –¥–∞–Ω–Ω—ã–µ —Ç–µ–∫—É—â–µ–π –∞–Ω–∫–µ—Ç—ã)
        target_profile = db.get_profile(target)
        name = target_profile['name'] if target_profile else "–≤–∞–º"
        target_unseen = db.get_unseen_matches_count(target)
        await call.bot.send_message(target, f"ü§ù –£ –≤–∞—Å {target_unseen} –Ω–µ–ø—Ä–æ—Å–º–æ—Ç—Ä–µ–Ω–Ω—ã—Ö –º–∞—Ç—á–µ–π!")
    else:
        unseen = get_unseen_likes_count(target)
        await call.bot.send_message(
            target,
            f"‚ù§Ô∏è –£ –≤–∞—Å {unseen} –Ω–µ–ø—Ä–æ—Å–º–æ—Ç—Ä–µ–Ω–Ω—ã—Ö –ª–∞–π–∫–æ–≤!"
        )
    change_balance(call.from_user.id, 0)  # –∑–¥–µ—Å—å –º–æ–∂–Ω–æ –æ—Å—Ç–∞–≤–∏—Ç—å –¥–ª—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
    await call.answer()
    # –ø–æ–∫–∞–∑–∞—Ç—å —Å–ª–µ–¥—É—é—â–∏–π –ø—Ä–æ—Ñ–∏–ª—å
    await show_next_profile(call, state)

# –õ–∞–π–∫ + —Å–æ–æ–±—â–µ–Ω–∏–µ
@router.callback_query(ProfileStates.BROWSING, F.data.startswith("like_msg:"))
async def like_with_msg_req(call: CallbackQuery, state: FSMContext):
    target = int(call.data.split(":")[1])
    await state.update_data(liked_user_id=target)
    await state.set_state(ProfileStates.LIKE_WITH_MESSAGE)
    await call.message.answer("–ù–∞–ø–∏—à–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ, –∫–æ—Ç–æ—Ä–æ–µ –±—É–¥–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤–º–µ—Å—Ç–µ —Å –ª–∞–π–∫–æ–º:")
    await call.answer()

@router.message(ProfileStates.LIKE_WITH_MESSAGE)
async def like_with_msg(msg: Message, state: FSMContext):
    data = await state.get_data()
    target = data["liked_user_id"]
    text   = msg.text[:500]  # –æ–±—Ä–µ–∑–∞–µ–º, –µ—Å–ª–∏ —Å–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ
    add_like(msg.from_user.id, target, message=text)
    # —É–≤–µ–¥–æ–º–ª—è–µ–º –ø–æ–ª—É—á–∞—Ç–µ–ª—è
    if db.user_liked(target, msg.from_user.id):
        # –ü–æ–ª—É—á–∞–µ–º –∏–º—è –æ–ø–ø–æ–Ω–µ–Ω—Ç–∞ –¥–ª—è —Å–æ–æ–±—â–µ–Ω–∏—è (–º–æ–∂–Ω–æ –±—ã–ª–æ –ø–µ—Ä–µ–¥–∞—Ç—å —á–µ—Ä–µ–∑ callback –∏–ª–∏ —Ö—Ä–∞–Ω–∏—Ç—å –≤ FSM –¥–∞–Ω–Ω—ã–µ —Ç–µ–∫—É—â–µ–π –∞–Ω–∫–µ—Ç—ã)
        target_profile = db.get_profile(target)
        name = target_profile['name'] if target_profile else "–≤–∞–º"
        target_unseen = db.get_unseen_matches_count(target)
        await msg.bot.send_message(target, f"ü§ù –£ –≤–∞—Å {target_unseen} –Ω–µ–ø—Ä–æ—Å–º–æ—Ç—Ä–µ–Ω–Ω—ã—Ö –º–∞—Ç—á–µ–π!")
    else:
        unseen = get_unseen_likes_count(target)
        await msg.bot.send_message(
            target,
            f"‚ù§Ô∏è –£ –≤–∞—Å {unseen} –Ω–µ–ø—Ä–æ—Å–º–æ—Ç—Ä–µ–Ω–Ω—ã—Ö –ª–∞–π–∫–æ–≤!"
        )
    await msg.answer("–°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤–º–µ—Å—Ç–µ —Å –ª–∞–π–∫–æ–º! üëç")
    await state.set_state(ProfileStates.BROWSING)
    await show_next_profile(msg, state)

# –õ–∞–π–∫ + –ø–µ—Ä–µ–¥–∞—á–∞ –≤–∞–ª—é—Ç—ã
@router.callback_query(ProfileStates.BROWSING, F.data.startswith("like_cash:"))
async def like_with_cash_req(call: CallbackQuery, state: FSMContext):
    target  = int(call.data.split(":")[1])
    profile = get_user(call.from_user.id)
    bal     = profile["balance"]
    await state.update_data(liked_user_id=target)
    await state.set_state(ProfileStates.LIKE_WITH_CASH)
    await call.message.answer(f"–£ –≤–∞—Å –Ω–∞ —Å—á–µ—Ç—É {bal} –º–æ–Ω–µ—Ç. –í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É, –∫–æ—Ç–æ—Ä—É—é —Ö–æ—Ç–∏—Ç–µ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –≤–º–µ—Å—Ç–µ —Å –ª–∞–π–∫–æ–º:")
    await call.answer()

@router.message(ProfileStates.LIKE_WITH_CASH)
async def like_with_cash(msg: Message, state: FSMContext):
    data   = await state.get_data()
    target = data["liked_user_id"]
    try:
        amount = int(msg.text)
        if amount <= 0:
            raise ValueError
    except ValueError:
        return await msg.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–æ–µ —á–∏—Å–ª–æ –º–æ–Ω–µ—Ç.")

    profile = get_user(msg.from_user.id)
    if profile["balance"] < amount:
        return await msg.answer("–£ –≤–∞—Å –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –º–æ–Ω–µ—Ç. –í–≤–µ–¥–∏—Ç–µ –¥—Ä—É–≥—É—é —Å—É–º–º—É.")

    # —Å–ø–∏—Å—ã–≤–∞–µ–º —Å –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—è –∏ –∑–∞—á–∏—Å–ª—è–µ–º –ø–æ–ª—É—á–∞—Ç–µ–ª—é
    change_balance(msg.from_user.id, -amount)
    change_balance(target, amount)
    add_like(msg.from_user.id, target, amount=amount)

    if db.user_liked(target, msg.from_user.id):
        # –ü–æ–ª—É—á–∞–µ–º –∏–º—è –æ–ø–ø–æ–Ω–µ–Ω—Ç–∞ –¥–ª—è —Å–æ–æ–±—â–µ–Ω–∏—è (–º–æ–∂–Ω–æ –±—ã–ª–æ –ø–µ—Ä–µ–¥–∞—Ç—å —á–µ—Ä–µ–∑ callback –∏–ª–∏ —Ö—Ä–∞–Ω–∏—Ç—å –≤ FSM –¥–∞–Ω–Ω—ã–µ —Ç–µ–∫—É—â–µ–π –∞–Ω–∫–µ—Ç—ã)
        target_profile = db.get_profile(target)
        name = target_profile['name'] if target_profile else "–≤–∞–º"
        target_unseen = db.get_unseen_matches_count(target)
        await msg.bot.send_message(target, f"ü§ù –£ –≤–∞—Å {target_unseen} –Ω–µ–ø—Ä–æ—Å–º–æ—Ç—Ä–µ–Ω–Ω—ã—Ö –º–∞—Ç—á–µ–π!")
    else:
        unseen = get_unseen_likes_count(target)
        await msg.bot.send_message(
            target,
            f"‚ù§Ô∏è –£ –≤–∞—Å {unseen} –Ω–µ–ø—Ä–æ—Å–º–æ—Ç—Ä–µ–Ω–Ω—ã—Ö –ª–∞–π–∫–æ–≤!"
        )
    await msg.answer(f"–í—ã –æ—Ç–ø—Ä–∞–≤–∏–ª–∏ –ª–∞–π–∫ –∏ {amount} –º–æ–Ω–µ—Ç. üí∏")
    await state.set_state(ProfileStates.BROWSING)
    await show_next_profile(msg, state)

@router.callback_query(StateFilter(ProfileStates.BROWSING), F.data == "exit_browse")
async def on_exit_browse(callback: types.CallbackQuery, state: FSMContext):
    # –í—ã–π—Ç–∏ –∏–∑ —Ä–µ–∂–∏–º–∞ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞
    await callback.message.delete()  # —É–¥–∞–ª—è–µ–º –ø–æ—Å–ª–µ–¥–Ω—é—é –ø–æ–∫–∞–∑–∞–Ω–Ω—É—é –∞–Ω–∫–µ—Ç—É
    await state.set_state(ProfileStates.MENU)
    user_id = callback.from_user.id
    my_profile = db.get_profile(user_id)
    await callback.message.answer("üìñ –í—ã –≤–µ—Ä–Ω—É–ª–∏—Å—å –≤ –º–µ–Ω—é.", reply_markup=build_menu_keyboard(my_profile['gender']))
