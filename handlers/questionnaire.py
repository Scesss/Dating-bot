from aiogram import Router, types, F
from aiogram.fsm.context import FSMContext
from states.profile_states import ProfileStates
from keyboards.builders import (build_gender_keyboard, build_preference_keyboard,
                                build_confirmation_keyboard, build_location_keyboard)
from aiogram.filters import StateFilter
from services.geocoding import get_city_name
from aiogram.filters import Command


router = Router()

# Handle name
@router.message(StateFilter(ProfileStates.NAME))
async def process_name(message: types.Message, state: FSMContext):
    if len(message.text) < 2:
        return await message.answer("–ò–º—è –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –∫–æ—Ä–æ—á–µ –¥–≤—É—Ö –±—É–∫–≤")
    await state.update_data(name=message.text)
    await message.answer("–°–∫–æ–ª—å–∫–æ —Ç–µ–±–µ –ª–µ—Ç?")
    await state.set_state(ProfileStates.AGE)


# Handle age
@router.message(StateFilter(ProfileStates.AGE))
async def process_age(message: types.Message, state: FSMContext):
    if not message.text.isdigit():
        return await message.answer("–í–æ–∑—Ä–∞—Å—Ç –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —Ü–µ–ª—ã–º —á–∏—Å–ª–æ–º.")

    age = int(message.text)
    if age < 14 or age > 100:
        return await message.answer("–í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –≤–æ–∑—Ä–∞—Å—Ç.")

    await state.update_data(age=age)
    await message.answer(
        "–¢–≤–æ–π –ø–æ–ª?",
        reply_markup=build_gender_keyboard()
    )
    await state.set_state(ProfileStates.GENDER)


# Handle gender
@router.message(StateFilter(ProfileStates.GENDER))
async def process_gender(message: types.Message, state: FSMContext):
    valid_genders = ["–ü–∞—Ä–µ–Ω—å", "–î–µ–≤—É—à–∫–∞"]
    if message.text not in valid_genders:
        return await message.answer("–ù–µ—Ç —Ç–∞–∫–æ–≥–æ –≤–∞—Ä–∏–∞–Ω—Ç–∞ –æ—Ç–≤–µ—Ç–∞")

    await state.update_data(gender=message.text)
    await message.answer(
        "–ö—Ç–æ —Ç–µ–±–µ –∏–Ω—Ç–µ—Ä–µ—Å–µ–Ω?",
        reply_markup=build_preference_keyboard()
    )
    await state.set_state(ProfileStates.LOOKING_FOR)


# Handle preference
@router.message(StateFilter(ProfileStates.LOOKING_FOR))
async def process_preference(message: types.Message, state: FSMContext):
    valid_options = ["–î–µ–≤—É—à–∫–∏", "–ü–∞—Ä–Ω–∏"]
    if message.text not in valid_options:
        return await message.answer("–ù–µ—Ç —Ç–∞–∫–æ–≥–æ –≤–∞—Ä–∏–∞–Ω—Ç–∞ –æ—Ç–≤–µ—Ç–∞")

    await state.update_data(looking_for=message.text)
    await message.answer(
        "–†–∞—Å—Å–∫–∞–∂–∏ –æ —Å–µ–±–µ:",
        reply_markup=types.ReplyKeyboardRemove()
    )
    await state.set_state(ProfileStates.BIO)


# Handle bio
@router.message(StateFilter(ProfileStates.BIO))
async def process_bio(message: types.Message, state: FSMContext):
    # if len(message.text) < 50:
    #     return await message.answer("Your bio should be at least 50 characters. Try again:")
    #
    if len(message.text) > 1000:
        return await message.answer("–í–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –¥–ª–∏–Ω–Ω–µ–µ 1000 —Å–∏–º–≤–æ–ª–æ–≤.")

    await state.update_data(bio=message.text)
    await message.answer("–¢–≤–æ–µ —Ñ–æ—Ç–æ?")
    await state.set_state(ProfileStates.PHOTO)



# Handle photo
@router.message(StateFilter(ProfileStates.PHOTO, F.photo))
async def process_photo(message: types.Message, state: FSMContext):
    # Get highest resolution photo
    photo = message.photo[-1]
    await state.update_data(photo_id=photo.file_id)

    await message.answer(
        "–û—Ç–ø—Ä–∞–≤—å –º–Ω–µ —Å–≤–æ—é –≥–µ–æ–ø–æ–∑–∏—Ü–∏—é:",
        reply_markup=build_location_keyboard()
    )
    await state.set_state(ProfileStates.LOCATION)


# Handle invalid photo
@router.message(StateFilter(ProfileStates.PHOTO))
async def process_photo_invalid(message: types.Message):
    await message.answer("–¢—Ä–µ–±—É–µ—Ç—Å—è —Ñ–æ—Ç–æ.")


# Remove the old LOCATION handler and replace with this:
@router.message(ProfileStates.LOCATION)
async def process_location(message: types.Message, state: FSMContext):
    location_data = None

    if message.location:
        # User shared location via button
        lat = message.location.latitude
        lon = message.location.longitude
        location_data = f"{lat},{lon}"
        await state.update_data(location=location_data)
        await message.answer("üìç –õ–æ–∫–∞—Ü–∏—è –ø–æ–ª—É—á–µ–Ω–∞! –°–ø–∞—Å–∏–±–æ")
    elif message.text and message.text == "üö´ –ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å –±–µ–∑ –ª–æ–∫–∞—Ü–∏–∏":
        # User chose to skip
        await state.update_data(location=None)
        await message.answer("–ì–µ–æ–ª–æ–∫–∞—Ü–∏—è –Ω–µ –±—É–¥–µ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –ø—Ä–∏ –ø–æ–∏—Å–∫–µ")
    else:
        # Invalid input
        await message.answer("–û—à–∏–±–∫–∞, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ —Å–Ω–∏–∑—É")
        return  # Stay in current state


    # Prepare confirmation
    data = await state.get_data()

    city_name = "–ù–µ —É–∫–∞–∑–∞–Ω"
    if data.get('location'):
        try:
            lat, lon = map(float, data['location'].split(','))
            city_name = await get_city_name(lat, lon)
        except Exception as e:
            # logger.error(f"Failed to get city name: {e}")
            city_name = "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –≥–æ—Ä–æ–¥"

    confirmation_text = (
        "üìù –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –¥–∞–Ω–Ω—ã–µ –≤–∞—à–µ–≥–æ –ø—Ä–æ—Ñ–∏–ª—è:\n\n"
        f"üë§ –ò–º—è: {data.get('name', 'N/A')}\n"
        f"üéÇ –í–æ–∑—Ä–∞—Å—Ç: {data.get('age', 'N/A')}\n"
        f"üöª –ü–æ–ª: {data.get('gender', 'N/A')}\n"
        f"üíò –ò—â—É: {data.get('looking_for', 'N/A')}\n"
        f"üåé: {city_name}\n"  # Show city name here
        f"üìñ –û —Å–µ–±–µ: {data.get('bio', 'N/A')[:500]}\n"
        "–í—Å–µ –≤–µ—Ä–Ω–æ?"
    )

    if 'photo_id' in data:
        await message.answer_photo(
            photo=data['photo_id'],
            caption=confirmation_text,
            reply_markup=build_confirmation_keyboard()
        )
    else:
        await message.answer(
            confirmation_text,
            reply_markup=build_confirmation_keyboard()
        )

    await state.set_state(ProfileStates.CONFIRMATION)


@router.message(ProfileStates.CONFIRMATION)
async def process_confirmation(message: types.Message, state: FSMContext):
    data = await state.get_data()



    if message.text == "‚úÖ –í–µ—Ä–Ω–æ":
        # Save profile to database (we'll implement this later)
        data = await state.get_data()
        await message.answer(
            "–ü—Ä–æ—Ñ–∏–ª—å —Å–æ—Ö—Ä–∞–Ω–µ–Ω —É—Å–ø–µ—à–Ω–æ! üéâ\n",
            reply_markup=types.ReplyKeyboardRemove()
        )
        await state.clear()
    elif message.text == "üîÑ –ó–∞–ø–æ–ª–Ω–∏—Ç—å –∑–∞–Ω–æ–≤–æ":
        await state.clear()
        await message.answer(
            "Profile creation restarted. Type /start to begin again.",
            reply_markup=types.ReplyKeyboardRemove()
        )
    else:
        await message.answer("–ù–µ—Ç —Ç–∞–∫–æ–≥–æ –≤–∞—Ä–∏–∞–Ω—Ç–∞ –æ—Ç–≤–µ—Ç–∞")



__all__ = ['router']