from aiogram import Router, types, F, Bot
from aiogram.fsm.context import FSMContext
from handlers.common import cmd_start
from states.profile_states import ProfileStates
from keyboards.builders import *
from aiogram.filters import StateFilter
from services.geocoding import get_city_name, is_valid_city
from utils.navigation import Navigation
from database import db
import logging
from aiogram.filters import Command
from services.geocoding import get_city_name_from_query

logger = logging.getLogger(__name__)
router = Router()

# Handle name


@router.message(StateFilter(ProfileStates.NAME))
async def process_name(message: types.Message, state: FSMContext, bot : Bot):
    if message.text == "üö´ –û—Ç–º–µ–Ω–∞":
        await cmd_start(message, state, bot)
        return

    if len(message.text) < 2:
        return await message.answer("‚ùå –ò–º—è –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –∫–æ—Ä–æ—á–µ –¥–≤—É—Ö –±—É–∫–≤")
    await state.update_data(name=message.text)
    await message.answer("‚ùî –°–∫–æ–ª—å–∫–æ —Ç–µ–±–µ –ª–µ—Ç?", reply_markup=build_back_keyboard())
    await state.set_state(ProfileStates.AGE)


# Handle age
@router.message(StateFilter(ProfileStates.AGE))
async def process_age(message: types.Message, state: FSMContext):
    if message.text == "‚¨ÖÔ∏è –ù–∞–∑–∞–¥":
        await Navigation.go_back(message, state)
        return

    if not message.text.isdigit():
        return await message.answer("‚ùå –í–æ–∑—Ä–∞—Å—Ç –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —Ü–µ–ª—ã–º —á–∏—Å–ª–æ–º.")

    age = int(message.text)
    if age < 14 or age > 100:
        return await message.answer("‚ùå –í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –≤–æ–∑—Ä–∞—Å—Ç.")

    await state.update_data(age=age)
    await message.answer(
        "üë§ –¢–≤–æ–π –ø–æ–ª?",
        reply_markup=build_gender_keyboard()
    )
    await state.set_state(ProfileStates.GENDER)


# Handle gender
@router.message(StateFilter(ProfileStates.GENDER))
async def process_gender(message: types.Message, state: FSMContext):
    if message.text == "‚¨ÖÔ∏è –ù–∞–∑–∞–¥":
        await Navigation.go_back(message, state)
        return

    valid_genders = ["–ü–∞—Ä–µ–Ω—å", "–î–µ–≤—É—à–∫–∞"]
    if message.text not in valid_genders:
        return await message.answer("‚ùå –ù–µ—Ç —Ç–∞–∫–æ–≥–æ –≤–∞—Ä–∏–∞–Ω—Ç–∞ –æ—Ç–≤–µ—Ç–∞")

    await state.update_data(gender=message.text)
    await message.answer(
        "üíï –ö—Ç–æ —Ç–µ–±–µ –∏–Ω—Ç–µ—Ä–µ—Å–µ–Ω?",
        reply_markup=build_preference_keyboard()
    )
    await state.set_state(ProfileStates.LOOKING_FOR)


# Handle preference
@router.message(StateFilter(ProfileStates.LOOKING_FOR))
async def process_preference(message: types.Message, state: FSMContext):
    if message.text == "‚¨ÖÔ∏è –ù–∞–∑–∞–¥":
        await Navigation.go_back(message, state)
        return

    valid_options = ["–î–µ–≤—É—à–∫–∏", "–ü–∞—Ä–Ω–∏"]
    if message.text not in valid_options:
        return await message.answer("‚ùå –ù–µ—Ç —Ç–∞–∫–æ–≥–æ –≤–∞—Ä–∏–∞–Ω—Ç–∞ –æ—Ç–≤–µ—Ç–∞")

    await state.update_data(looking_for=message.text)
    await message.answer(
        "‚úçÔ∏è –†–∞—Å—Å–∫–∞–∂–∏ –æ —Å–µ–±–µ:",
        reply_markup=build_back_keyboard()
    )
    await state.set_state(ProfileStates.BIO)


# Handle bio
@router.message(StateFilter(ProfileStates.BIO))
async def process_bio(message: types.Message, state: FSMContext):
    if message.text == "‚¨ÖÔ∏è –ù–∞–∑–∞–¥":
        await Navigation.go_back(message, state)
        return

    # if len(message.text) < 50:
    #     return await message.answer("Your bio should be at least 50 characters. Try again:")
    #
    if len(message.text) > 1000:
        return await message.answer("‚ùå –í–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –¥–ª–∏–Ω–Ω–µ–µ 1000 —Å–∏–º–≤–æ–ª–æ–≤.")

    await state.update_data(bio=message.text)
    await message.answer("üì∏ –¢–≤–æ–µ —Ñ–æ—Ç–æ?", reply_markup=build_back_keyboard())
    await state.set_state(ProfileStates.PHOTO)



# Handle photo
@router.message(StateFilter(ProfileStates.PHOTO, F.photo))
async def process_photo(message: types.Message, state: FSMContext):
    if message.text == "‚¨ÖÔ∏è –ù–∞–∑–∞–¥":
        await Navigation.go_back(message, state)
        return

    # Get highest resolution photo
    photo = message.photo[-1]
    await state.update_data(photo_id=photo.file_id)

    await message.answer(
        "üìç –ò–∑ –∫–∞–∫–æ–≥–æ —Ç—ã –≥–æ—Ä–æ–¥–∞?",
        reply_markup=build_location_keyboard()
    )
    await state.set_state(ProfileStates.LOCATION)


# Handle invalid photo
@router.message(StateFilter(ProfileStates.PHOTO))
async def process_photo_invalid(message: types.Message):
    await message.answer("‚ùå –¢—Ä–µ–±—É–µ—Ç—Å—è —Ñ–æ—Ç–æ.")

# @router.message(ProfileStates.LOCATION,F.text == "‚úèÔ∏è –í–≤–µ—Å—Ç–∏ –≥–æ—Ä–æ–¥ –≤—Ä—É—á–Ω—É—é")
# async def request_city_input(message: types.Message):
#     await message.answer(
#         "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –≤–∞—à–µ–≥–æ –≥–æ—Ä–æ–¥–∞:",
#         reply_markup=types.ReplyKeyboardRemove()
#     )

# Remove the old LOCATION handler and replace with this:
@router.message(ProfileStates.LOCATION)
async def process_location(message: types.Message, state: FSMContext):
    if message.text == "‚¨ÖÔ∏è –ù–∞–∑–∞–¥":
        await Navigation.go_back(message, state)
        return

    location_data = None
    city_name = None

    # Handle location sharing via button
    if message.location:
        lat = message.location.latitude
        lon = message.location.longitude
        location_data = f"{lat},{lon}"
        city_name = await get_city_name(lat, lon)
        await message.answer(f"‚úÖ –ú–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ –ø–æ–ª—É—á–µ–Ω–æ: {city_name}")

    # Handle skip location
    elif message.text and message.text == "üö´ –ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å":
        await message.answer("–û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏—è –ø—Ä–æ–ø—É—â–µ–Ω–æ, —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –º–æ–≥—É—Ç –±—ã—Ç—å –º–µ–Ω–µ–µ —Ç–æ—á–Ω—ã–º–∏...")

    elif message.text:
        # —Å–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —ç—Ç–æ –≤–æ–æ–±—â–µ –≥–æ—Ä–æ–¥
        ok = await is_valid_city(message.text)
        if not ok:
            await message.answer(
                "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–æ–∑–Ω–∞—Ç—å –≥–æ—Ä–æ–¥. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ, –Ω–∞–ø—Ä–∏–º–µ—Ä, ¬´–ú–æ—Å–∫–≤–∞¬ª –∏–ª–∏ "
                "–æ—Ç–ø—Ä–∞–≤—å—Ç–µ –≥–µ–æ–ª–æ–∫–∞—Ü–∏—é —á–µ—Ä–µ–∑ –∫–Ω–æ–ø–∫—É."
            )
            return

        # –ø–æ–ª—É—á–∞–µ–º –∫–∞–Ω–æ–Ω–∏—á–µ—Å–∫–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∏–∑ –≥–µ–æ–∫–æ–¥–µ—Ä–∞
        canon = await get_city_name_from_query(message.text)
        if canon:
            city_name = canon
        else:
            # –Ω–∞ —Å–ª—É—á–∞–π, –µ—Å–ª–∏ —á—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫ ‚Äî –≤—Å—ë —Ä–∞–≤–Ω–æ —Å–æ—Ö—Ä–∞–Ω–∏–º user input
            city_name = message.text.title()

        await message.answer(f"‚úÖ –ì–æ—Ä–æ–¥ —Å–æ—Ö—Ä–∞–Ω—ë–Ω: {city_name}")

    else:
        # Invalid input
        await message.answer("‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –Ω–∏–∂–µ –∏–ª–∏ –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –≥–æ—Ä–æ–¥–∞.")
        return

    # Update state data
    await state.update_data({
        "location": location_data,
        "city_name": city_name  # Store both coordinates and city name
    })

    # Proceed to confirmation
    await show_confirmation(message, state)


async def show_confirmation(message: types.Message, state: FSMContext):
    data = await state.get_data()

    # Prepare confirmation text
    confirmation_text = (
        "üìù –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –≤–∞—à –ø—Ä–æ—Ñ–∏–ª—å:\n\n"
        f"üë§ –ò–º—è: {data.get('name', '–ù/–î')}\n"
        f"üéÇ –í–æ–∑—Ä–∞—Å—Ç: {data.get('age', '–ù/–î')}\n"
        f"üöª –ü–æ–ª: {data.get('gender', '–ù/–î')}\n"
        f"üíò –ò—â—É: {data.get('looking_for', '–ù/–î')}\n"
        f"üìç –ì–æ—Ä–æ–¥: {data.get('city_name', '–ù–µ —É–∫–∞–∑–∞–Ω')}\n"
        f"üìñ –û —Å–µ–±–µ: {data.get('bio', '–ù/–î')[:100]}...\n"
        "–í—Å—ë –≤–µ—Ä–Ω–æ?"
    )

    # Show profile photo if available
    if 'photo_id' in data:
        await message.answer_photo(
            photo=data['photo_id'],
            caption=confirmation_text,
            reply_markup=build_confirmation_keyboard(),
            parse_mode  = None
        )
    else:
        await message.answer(
            confirmation_text,
            reply_markup=build_confirmation_keyboard()
        )

    await state.set_state(ProfileStates.CONFIRMATION)


@router.message(ProfileStates.CONFIRMATION)
async def process_confirmation(message: types.Message, state: FSMContext):
    data = await state.get_data()
    if message.text == "‚úÖ –í–µ—Ä–Ω–æ":
        # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –ø—Ä–æ—Ñ–∏–ª—è –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
        try:
            db.save_profile(
                user_id=message.from_user.id,
                name=data.get('name'),
                age=data.get('age'),
                gender=data.get('gender'),
                looking_for=data.get('looking_for'),
                bio=data.get('bio'),
                photo_id=data.get('photo_id'),
                city=data.get('city_name'),              # –Ω–∞–∑–≤–∞–Ω–∏–µ –≥–æ—Ä–æ–¥–∞ (–º–æ–∂–µ—Ç –±—ã—Ç—å None)
                # –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã —Ö—Ä–∞–Ω–∏–º –∫–∞–∫ —á–∏—Å–ª–æ–≤—ã–µ –ø–æ–ª—è; —Ä–∞—Å–ø–∞—Ä—Å–∏–º —Å—Ç—Ä–æ–∫—É "lat,lon", –µ—Å–ª–∏ –µ—Å—Ç—å
                lat=float(data['location'].split(',')[0]) if data.get('location') else None,
                lon=float(data['location'].split(',')[1]) if data.get('location') else None
            )

        except Exception as e:
            logging.error(f"Error saving profile: {e}")

        # await message.answer(
        #     "–ü—Ä–æ—Ñ–∏–ª—å —Å–æ—Ö—Ä–∞–Ω—ë–Ω —É—Å–ø–µ—à–Ω–æ! üéâ",
        #     reply_markup=types.ReplyKeyboardRemove()
        # )
        # await state.clear()
        await message.answer("–ü—Ä–æ—Ñ–∏–ª—å —Å–æ—Ö—Ä–∞–Ω—ë–Ω —É—Å–ø–µ—à–Ω–æ! üéâ", reply_markup=build_menu_keyboard(data["gender"]))
        await state.set_state(ProfileStates.MENU)


        # –ü–æ—Å–ª–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –º–æ–∂–Ω–æ –ø–æ–∫–∞–∑–∞—Ç—å –º–µ–Ω—é / –ø—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é,
        # –Ω–∞–ø—Ä–∏–º–µ—Ä, –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ –∏–ª–∏ —Å—Ä–∞–∑—É –≤—ã–∑–≤–∞—Ç—å /start.
        # (–í –¥–∞–Ω–Ω–æ–º —Å–ª—É—á–∞–µ –º—ã –ø—Ä–æ—Å—Ç–æ –æ—á–∏—Å—Ç–∏–ª–∏ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∏ —É–±—Ä–∞–ª–∏ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É.)
    elif message.text == "üîÑ –ó–∞–ø–æ–ª–Ω–∏—Ç—å –∑–∞–Ω–æ–≤–æ":
        await message.answer(" –ù–∞—á–Ω—ë–º –∑–∞–ø–æ–ª–Ω–µ–Ω–∏–µ –∞–Ω–∫–µ—Ç—ã —Å –Ω–∞—á–∞–ª–∞. –ö–∞–∫ —Ç–µ–±—è –∑–æ–≤—É—Ç?", reply_markup=build_cancel_keyboard())
        await state.set_state(ProfileStates.NAME)

@router.message(ProfileStates.RESTART)
async def process_restart(message: types.Message, state: FSMContext):
    data = await state.get_data()
    if message.text == "‚úÖ –í–ø–µ—Ä–µ–¥":
        await message.answer("‚ùî –ù–∞—á–Ω—ë–º –∑–∞–ø–æ–ª–Ω–µ–Ω–∏–µ –∞–Ω–∫–µ—Ç—ã. –ö–∞–∫ —Ç–µ–±—è –∑–æ–≤—É—Ç?",
                             reply_markup=build_cancel_keyboard())
        await state.set_state(ProfileStates.NAME)
    else:
        profile = db.get_profile(message.from_user.id)
        gender = profile.get("gender")
        await message.answer("‚è≥ –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –≤ –º–µ–Ω—é...",
                             reply_markup=build_menu_keyboard(gender))





__all__ = ['router']