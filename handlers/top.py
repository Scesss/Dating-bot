from aiogram import Router
from aiogram.filters import Command
from aiogram.types import Message, CallbackQuery, InputMediaPhoto
from aiogram.fsm.context import FSMContext
from database.db import get_all_profiles_sorted_by_balance
from keyboards.builders import *
from states.profile_states import *
from database import db

router = Router()

@router.message(Command("top"))
async def cmd_top(message: Message, state: FSMContext):
    """
    –ö–æ–º–∞–Ω–¥–∞ /top ‚Äî –∑–∞–≥—Ä—É–∂–∞–µ—Ç –≤—Å–µ –∞–Ω–∫–µ—Ç—ã, —Å–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –ø–æ balance desc,
    —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç –≤ state –∏ –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç –ø–µ—Ä–≤—É—é.
    """
    profiles = get_all_profiles_sorted_by_balance()  # –¥–æ–ª–∂–µ–Ω –≤–æ–∑–≤—Ä–∞—â–∞—Ç—å list[dict]
    if not profiles:
        return await message.answer("–ü–æ–∫–∞ –Ω–µ—Ç –Ω–∏ –æ–¥–Ω–æ–π –∞–Ω–∫–µ—Ç—ã.")
    # —Å–æ—Ö—Ä–∞–Ω—è–µ–º –≤ state
    await state.update_data(top_profiles=profiles, top_index=0)
    await show_top_profile(message, state)


async def show_top_profile(
    message_or_query, state: FSMContext, is_query: bool = False
):
    """
    –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è: –µ—Å–ª–∏ is_query=True ‚Äî —Ä–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º –ø—Ä–µ–¥—ã–¥—É—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ,
    –∏–Ω–∞—á–µ ‚Äî —à–ª—ë–º –Ω–æ–≤–æ–µ.
    """
    data = await state.get_data()
    profiles = data["top_profiles"]
    idx = data["top_index"]
    prof = profiles[idx]

    # —Ñ–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç
    rank = db.get_user_rank(prof['user_id'])
    text = (f"{prof['name']}, "
               f"{prof['age']}, "
               f"{prof['city'] or '–ù–µ —É–∫–∞–∑–∞–Ω'}\n\n"
               f" {prof['bio'][:1000]}\n\n"
               f" ü™ô {prof['balance']}, —Ç–æ–ø {rank}")

    kb = build_top_navigation_keyboard(idx, len(profiles))

    if prof.get("photo_id"):
        if is_query:
            # —Ä–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º —Ç–µ–∫—É—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —Ñ–æ—Ç–æ
            await message_or_query.message.edit_media(
                media=InputMediaPhoto(
                    media=prof["photo_id"],
                    caption=text
                ),
                reply_markup=kb,
                parse_mode = None
            )
        else:
            await message_or_query.answer_photo(
                photo=prof["photo_id"],
                caption=text,
                reply_markup=kb,
                parse_mode  = None
            )
    else:
        if is_query:
            await message_or_query.message.edit_text(
                text=text,
                reply_markup=kb
            )
        else:
            await message_or_query.answer(
                text=text,
                reply_markup=kb
            )


@router.callback_query(lambda c: c.data.startswith("top:"))
async def top_navigation(cq: CallbackQuery, state: FSMContext):
    """
    –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–æ–∫ ¬´‚¨ÖÔ∏è¬ª, ¬´‚û°Ô∏è¬ª, ¬´‚ùå –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é¬ª
    """
    action = cq.data.split(":", 1)[1]
    data = await state.get_data()
    idx = data["top_index"]
    profiles = data["top_profiles"]
    total = len(profiles)

    if action == "prev":
        idx = (idx - 1) % total
    elif action == "next":
        idx = (idx + 1) % total
    elif action == "exit":
        await state.set_state(ProfileStates.MENU)
        user_id = cq.from_user.id
        my_profile = db.get_profile(user_id)
        await cq.message.answer("üìñ –í—ã –≤–µ—Ä–Ω—É–ª–∏—Å—å –≤ –º–µ–Ω—é.", reply_markup=build_menu_keyboard(my_profile['gender']))
        return

    await state.update_data(top_index=idx)
    await show_top_profile(cq, state, is_query=True)
    await cq.answer()  # —á—Ç–æ–±—ã —É–±—Ä–∞—Ç—å ¬´—á–∞—Å–∏–∫–∏¬ª —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
